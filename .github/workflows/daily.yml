name: daily-picks

on:
  schedule:
    # 週一到週五 06:30 Asia/Taipei = 前一天 22:30 UTC (週日到週四)
    # 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    # UTC 22:30 對應台北時間隔天 06:30，所以週日~週四的 UTC 22:30 = 週一~週五的台北 06:30
    - cron: "30 22 * * 0-4"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Install Chinese fonts for matplotlib
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-wqy-zenhei fonts-wqy-microhei
          fc-cache -fv
          echo "Installed fonts:"
          fc-list | grep -i "WenQuanYi" || echo "No WenQuanYi fonts found"

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      # === Google Drive (OAuth) 設定 ===
      # 需要事先在 Repository secrets 放入：
      # - GDRIVE_CLIENT_ID
      # - GDRIVE_CLIENT_SECRET
      # - GDRIVE_TOKEN_JSON   (含 refresh_token 的整段 JSON)
      # 可選：
      # - GDRIVE_ROOT_FOLDER_ID  指定同步的目標資料夾 ID（建議）
      - name: Configure rclone (Google Drive OAuth)
        env:
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
          GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID || secrets.GDRIVE_FOLDER_ID }}
        run: |
          set -e
          mkdir -p ~/.config/rclone

          # 檢查必要的環境變數
          if [ -z "${GDRIVE_CLIENT_ID}" ] || [ -z "${GDRIVE_CLIENT_SECRET}" ] || [ -z "${GDRIVE_TOKEN_JSON}" ]; then
            echo "::error::缺少必要的 Google Drive 認證資訊"
            echo "請確認以下 Secrets 已設定："
            echo "- GDRIVE_CLIENT_ID"
            echo "- GDRIVE_CLIENT_SECRET"
            echo "- GDRIVE_TOKEN_JSON"
            exit 1
          fi

          # 建立 rclone 配置檔
          {
            echo "[gdrive]"
            echo "type = drive"
            echo "scope = drive"
            echo "client_id = ${GDRIVE_CLIENT_ID}"
            echo "client_secret = ${GDRIVE_CLIENT_SECRET}"
            echo "token = ${GDRIVE_TOKEN_JSON}"
          } > ~/.config/rclone/rclone.conf

          # 如果有設定 root_folder_id，追加到設定檔
          if [ -n "${GDRIVE_ROOT_FOLDER_ID}" ]; then
            echo "root_folder_id = ${GDRIVE_ROOT_FOLDER_ID}" >> ~/.config/rclone/rclone.conf
            echo "✓ root_folder_id 已設定 (限制存取範圍到指定資料夾)" >> $GITHUB_STEP_SUMMARY
            echo "  Folder ID: ${GDRIVE_ROOT_FOLDER_ID:0:20}..." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ root_folder_id 未設定 (可存取整個 Google Drive)" >> $GITHUB_STEP_SUMMARY
            echo "  建議設定 GDRIVE_ROOT_FOLDER_ID 或 GDRIVE_FOLDER_ID Secret" >> $GITHUB_STEP_SUMMARY
          fi

          # 顯示配置檔案（隱藏敏感資訊）
          echo "### rclone remote configured" >> $GITHUB_STEP_SUMMARY
          echo "Config preview (secrets hidden):" >> $GITHUB_STEP_SUMMARY
          grep -v "client_id\|client_secret\|token" ~/.config/rclone/rclone.conf >> $GITHUB_STEP_SUMMARY || true

          # 診斷資訊
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Diagnostic Info" >> $GITHUB_STEP_SUMMARY
          echo "- Config file exists: $(test -f ~/.config/rclone/rclone.conf && echo 'YES' || echo 'NO')" >> $GITHUB_STEP_SUMMARY
          echo "- Config file size: $(wc -c < ~/.config/rclone/rclone.conf) bytes" >> $GITHUB_STEP_SUMMARY
          echo "- Number of lines: $(wc -l < ~/.config/rclone/rclone.conf)" >> $GITHUB_STEP_SUMMARY
          echo "- CLIENT_ID length: ${#GDRIVE_CLIENT_ID}" >> $GITHUB_STEP_SUMMARY
          echo "- CLIENT_SECRET length: ${#GDRIVE_CLIENT_SECRET}" >> $GITHUB_STEP_SUMMARY
          echo "- TOKEN_JSON length: ${#GDRIVE_TOKEN_JSON}" >> $GITHUB_STEP_SUMMARY
          echo "- TOKEN starts with: ${GDRIVE_TOKEN_JSON:0:20}..." >> $GITHUB_STEP_SUMMARY

      # 使用 Python 測試 Google Drive OAuth Token
      - name: Test Google Drive OAuth with Python
        timeout-minutes: 2
        env:
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
        run: |
          echo "### Python OAuth Test" >> $GITHUB_STEP_SUMMARY
          python test_gdrive_auth.py 2>&1 | tee /tmp/python_test.log
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/python_test.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # 測試 rclone 配置是否正常
      - name: Test rclone connection
        timeout-minutes: 2
        run: |
          echo "Testing rclone connection to Google Drive..."

          # 顯示配置檔的實際內容結構（不顯示完整值）
          echo "### Config File Structure" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          sed 's/client_id = .*/client_id = [HIDDEN]/; s/client_secret = .*/client_secret = [HIDDEN]/; s/token = .*/token = [HIDDEN - length: '$(grep "^token = " ~/.config/rclone/rclone.conf | wc -c)' chars]/' ~/.config/rclone/rclone.conf >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # 測試連接並捕獲錯誤
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Connection Test Result" >> $GITHUB_STEP_SUMMARY
          if rclone about gdrive: --timeout 30s --contimeout 30s 2>&1 | tee /tmp/rclone_test.log; then
            echo "✅ Connection successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Connection failed" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat /tmp/rclone_test.log >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No error log available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "::warning::rclone connection test failed, but continuing anyway"
          fi

      # 先把雲端資料同步到本地
      # 如果有設定 root_folder_id，只會同步該資料夾的內容
      - name: Sync data from Google Drive
        timeout-minutes: 5
        run: |
          mkdir -p data
          echo "開始從 Google Drive 同步資料..."
          echo "目標: gdrive: (根目錄或 root_folder_id 指定的資料夾)"
          echo "本地: ./data 和 ./line_id.txt"

          # 同步 data 資料夾
          # 使用 --timeout 和 --contimeout 避免卡住
          rclone sync "gdrive:" "./data" \
            -vv \
            --log-file rclone.log \
            --timeout 30s \
            --contimeout 60s \
            --retries 3 \
            --low-level-retries 3 \
            --create-empty-src-dirs || true

          # 下載 line_id.txt 到根目錄
          if rclone ls "gdrive:" | grep -q "line_id.txt"; then
            echo "發現 line_id.txt，下載中..."
            rclone copy "gdrive:line_id.txt" "./" -vv --timeout 30s || echo "line_id.txt 下載失敗"
          else
            echo "⚠️  Google Drive 中未找到 line_id.txt"
          fi

      # 執行你的主程式（會讀寫 ./data）
      - name: Run Taiwan stock recommendation bot
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
          # 可選參數（如有需要就在 Secrets 或 Variables 設定）
          # EXTRA_USER_IDS: ${{ secrets.EXTRA_USER_IDS }}
          # TWSE_CODES: "2330,2317,2303,2454,2603,2615,2881,2882,2886,1101"
          # TOP_K: "10"
        run: python main.py

      # 將更新後的資料回寫到雲端
      # 如果有設定 root_folder_id，只會上傳到該資料夾
      - name: Sync data back to Google Drive
        timeout-minutes: 5
        continue-on-error: true
        run: |
          # 檢查 ./data 目錄是否有內容
          if [ ! -d "./data" ] || [ -z "$(ls -A ./data)" ]; then
            echo "::warning::./data 目錄為空或不存在，跳過上傳"
            exit 0
          fi

          echo "開始上傳資料到 Google Drive..."
          echo "來源: ./data"
          echo "目標: gdrive: (根目錄或 root_folder_id 指定的資料夾)"
          echo "檔案數量: $(find ./data -type f | wc -l)"

          # 使用 copy 取代 sync，避免刪除雲端現有檔案
          rclone copy "./data" "gdrive:" \
            -vv \
            --log-file rclone.log \
            --timeout 30s \
            --contimeout 60s \
            --retries 3 \
            --low-level-retries 3 \
            --update \
            --checksum || {
              echo "::warning::rclone copy 失敗，但繼續執行"
              exit 0
            }

      # 失敗或成功都上傳 rclone 日誌，方便除錯
      - name: Upload rclone logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rclone-logs
          path: rclone.log
