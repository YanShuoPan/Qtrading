name: daily-picks

on:
  schedule:
    # 週一到週五 18:00 Asia/Taipei = 10:00 UTC (週一到週五)
    # 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    # UTC 10:00 對應台北時間 18:00，週末不執行
    - cron: "0 10 * * 1-5"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允許推送到 gh-pages 分支

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Verify package versions
        run: |
          echo "### Python Package Versions" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pip list | grep -E "(pandas|yfinance|matplotlib)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          python -c "import pandas as pd; import yfinance as yf; import matplotlib; print(f'pandas: {pd.__version__}'); print(f'yfinance: {yf.__version__}'); print(f'matplotlib: {matplotlib.__version__}')"

      - name: Install Chinese fonts for matplotlib
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-wqy-zenhei fonts-wqy-microhei
          fc-cache -fv
          echo "Installed fonts:"
          fc-list | grep -i "WenQuanYi" || echo "No WenQuanYi fonts found"

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      # === Google Drive (OAuth) 設定 ===
      # 需要事先在 Repository secrets 放入：
      # - GDRIVE_CLIENT_ID
      # - GDRIVE_CLIENT_SECRET
      # - GDRIVE_TOKEN_JSON   (含 refresh_token 的整段 JSON)
      # 可選：
      # - GDRIVE_ROOT_FOLDER_ID  指定同步的目標資料夾 ID（建議）
      - name: Configure rclone (Google Drive OAuth)
        env:
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
          GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID || secrets.GDRIVE_FOLDER_ID }}
        run: |
          set -e
          mkdir -p ~/.config/rclone

          # 檢查必要的環境變數
          if [ -z "${GDRIVE_CLIENT_ID}" ] || [ -z "${GDRIVE_CLIENT_SECRET}" ] || [ -z "${GDRIVE_TOKEN_JSON}" ]; then
            echo "::error::缺少必要的 Google Drive 認證資訊"
            echo "請確認以下 Secrets 已設定："
            echo "- GDRIVE_CLIENT_ID"
            echo "- GDRIVE_CLIENT_SECRET"
            echo "- GDRIVE_TOKEN_JSON"
            exit 1
          fi

          # 建立 rclone 配置檔
          {
            echo "[gdrive]"
            echo "type = drive"
            echo "scope = drive"
            echo "client_id = ${GDRIVE_CLIENT_ID}"
            echo "client_secret = ${GDRIVE_CLIENT_SECRET}"
            echo "token = ${GDRIVE_TOKEN_JSON}"
          } > ~/.config/rclone/rclone.conf

          # 如果有設定 root_folder_id，追加到設定檔
          if [ -n "${GDRIVE_ROOT_FOLDER_ID}" ]; then
            echo "root_folder_id = ${GDRIVE_ROOT_FOLDER_ID}" >> ~/.config/rclone/rclone.conf
            echo "✓ root_folder_id 已設定 (限制存取範圍到指定資料夾)" >> $GITHUB_STEP_SUMMARY
            echo "  Folder ID: ${GDRIVE_ROOT_FOLDER_ID:0:20}..." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ root_folder_id 未設定 (可存取整個 Google Drive)" >> $GITHUB_STEP_SUMMARY
            echo "  建議設定 GDRIVE_ROOT_FOLDER_ID 或 GDRIVE_FOLDER_ID Secret" >> $GITHUB_STEP_SUMMARY
          fi

          # 顯示配置檔案（隱藏敏感資訊）
          echo "### rclone remote configured" >> $GITHUB_STEP_SUMMARY
          echo "Config preview (secrets hidden):" >> $GITHUB_STEP_SUMMARY
          grep -v "client_id\|client_secret\|token" ~/.config/rclone/rclone.conf >> $GITHUB_STEP_SUMMARY || true

          # 診斷資訊
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Diagnostic Info" >> $GITHUB_STEP_SUMMARY
          echo "- Config file exists: $(test -f ~/.config/rclone/rclone.conf && echo 'YES' || echo 'NO')" >> $GITHUB_STEP_SUMMARY
          echo "- Config file size: $(wc -c < ~/.config/rclone/rclone.conf) bytes" >> $GITHUB_STEP_SUMMARY
          echo "- Number of lines: $(wc -l < ~/.config/rclone/rclone.conf)" >> $GITHUB_STEP_SUMMARY
          echo "- CLIENT_ID length: ${#GDRIVE_CLIENT_ID}" >> $GITHUB_STEP_SUMMARY
          echo "- CLIENT_SECRET length: ${#GDRIVE_CLIENT_SECRET}" >> $GITHUB_STEP_SUMMARY
          echo "- TOKEN_JSON length: ${#GDRIVE_TOKEN_JSON}" >> $GITHUB_STEP_SUMMARY
          echo "- TOKEN starts with: ${GDRIVE_TOKEN_JSON:0:20}..." >> $GITHUB_STEP_SUMMARY

      # 使用 Python 測試 Google Drive OAuth Token
      - name: Test Google Drive OAuth with Python
        timeout-minutes: 2
        env:
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
        run: |
          echo "### Python OAuth Test" >> $GITHUB_STEP_SUMMARY
          python tests/test_gdrive_auth.py 2>&1 | tee /tmp/python_test.log
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/python_test.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # 測試 rclone 配置是否正常
      - name: Test rclone connection
        timeout-minutes: 2
        run: |
          echo "Testing rclone connection to Google Drive..."

          # 顯示配置檔的實際內容結構（不顯示完整值）
          echo "### Config File Structure" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          sed 's/client_id = .*/client_id = [HIDDEN]/; s/client_secret = .*/client_secret = [HIDDEN]/; s/token = .*/token = [HIDDEN - length: '$(grep "^token = " ~/.config/rclone/rclone.conf | wc -c)' chars]/' ~/.config/rclone/rclone.conf >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # 測試連接並捕獲錯誤
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Connection Test Result" >> $GITHUB_STEP_SUMMARY
          if rclone about gdrive: --timeout 30s --contimeout 30s 2>&1 | tee /tmp/rclone_test.log; then
            echo "✅ Connection successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Connection failed" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat /tmp/rclone_test.log >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No error log available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "::warning::rclone connection test failed, but continuing anyway"
          fi

      # 先把雲端資料同步到本地
      # 如果有設定 root_folder_id，只會同步該資料夾的內容
      - name: Sync data from Google Drive
        timeout-minutes: 5
        run: |
          mkdir -p data
          echo "開始從 Google Drive 同步資料..."
          echo "目標: gdrive: (根目錄或 root_folder_id 指定的資料夾)"
          echo "本地: ./data 和 ./taiex.sqlite"

          # 下載 taiex.sqlite 到根目錄
          if rclone ls "gdrive:" | grep -q "taiex.sqlite"; then
            echo "發現 taiex.sqlite，下載中..."
            rclone copy "gdrive:taiex.sqlite" "./" -vv --timeout 30s || echo "taiex.sqlite 下載失敗"
          else
            echo "⚠️  Google Drive 中未找到 taiex.sqlite (首次執行會自動建立)"
          fi

          # 同步 data 資料夾 (日期子資料夾)
          # 使用 --timeout 和 --contimeout 避免卡住
          rclone sync "gdrive:data" "./data" \
            -vv \
            --log-file rclone.log \
            --timeout 30s \
            --contimeout 60s \
            --retries 3 \
            --low-level-retries 3 \
            --create-empty-src-dirs || true

          # 下載 line_id.txt 到根目錄
          if rclone ls "gdrive:" | grep -q "line_id.txt"; then
            echo "發現 line_id.txt，下載中..."
            rclone copy "gdrive:line_id.txt" "./" -vv --timeout 30s || echo "line_id.txt 下載失敗"
          else
            echo "⚠️  Google Drive 中未找到 line_id.txt"
          fi

      # 執行你的主程式（會讀寫 ./data）
      - name: Run Taiwan stock recommendation bot
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
          # 可選參數（如有需要就在 Secrets 或 Variables 設定）
          # EXTRA_USER_IDS: ${{ secrets.EXTRA_USER_IDS }}
          # TWSE_CODES: "2330,2317,2303,2454,2603,2615,2881,2882,2886,1101"
          # TOP_K: "10"
        run: python main.py

      # 從 gh-pages 拉取舊的 HTML 檔案，讓 index.html 可以列出所有歷史資料
      - name: Fetch historical HTML files from gh-pages
        continue-on-error: true
        run: |
          echo "從 gh-pages 分支拉取歷史 HTML 檔案..."

          # 配置 git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 拉取 gh-pages 分支
          git fetch origin gh-pages:gh-pages 2>/dev/null || {
            echo "gh-pages 分支不存在（可能是首次執行）"
            exit 0
          }

          # 切換到 gh-pages 分支
          git checkout gh-pages

          # 複製所有 HTML 檔案（排除 index.html）和 images 資料夾到暫存目錄
          mkdir -p /tmp/old_pages
          cp -r *.html /tmp/old_pages/ 2>/dev/null || echo "無 HTML 檔案"
          cp -r images /tmp/old_pages/ 2>/dev/null || echo "無 images 資料夾"

          # 切回主分支
          git checkout main

          # 將舊檔案合併到 docs 資料夾（不覆蓋新生成的檔案）
          mkdir -p docs/images
          cp -n /tmp/old_pages/*.html docs/ 2>/dev/null || echo "無舊 HTML 檔案可複製"

          # 合併 images 資料夾（保留新舊圖片）
          if [ -d "/tmp/old_pages/images" ]; then
            cp -rn /tmp/old_pages/images/* docs/images/ 2>/dev/null || echo "無舊圖片可複製"
          fi

          echo "歷史檔案合併完成，現在 docs 資料夾內容："
          ls -la docs/ | head -20

          # 重新生成 index.html，讓它包含所有歷史資料
          python -c "
          import sys
          sys.path.insert(0, '.')
          from modules.html_generator import generate_index_html
          generate_index_html(output_dir='docs')
          print('index.html 已更新，包含所有歷史資料')
          "

      # 將更新後的資料回寫到雲端
      # 如果有設定 root_folder_id，只會上傳到該資料夾
      - name: Sync data back to Google Drive
        timeout-minutes: 5
        continue-on-error: true
        run: |
          echo "開始上傳資料到 Google Drive..."

          # 上傳 taiex.sqlite 到根目錄
          if [ -f "./taiex.sqlite" ]; then
            echo "上傳 taiex.sqlite 到根目錄..."
            rclone copy "./taiex.sqlite" "gdrive:" \
              -vv \
              --log-file rclone.log \
              --timeout 30s \
              --contimeout 60s \
              --retries 3 \
              --update \
              --checksum || echo "::warning::taiex.sqlite 上傳失敗"
          else
            echo "⚠️  找不到 taiex.sqlite"
          fi

          # 上傳 data 資料夾 (日期子資料夾)
          if [ -d "./data" ] && [ -n "$(ls -A ./data)" ]; then
            echo "上傳 data 資料夾..."
            echo "檔案數量: $(find ./data -type f | wc -l)"
            rclone copy "./data" "gdrive:data" \
              -vv \
              --log-file rclone.log \
              --timeout 30s \
              --contimeout 60s \
              --retries 3 \
              --low-level-retries 3 \
              --update \
              --checksum || echo "::warning::data 資料夾上傳失敗"
          else
            echo "⚠️  data 資料夾為空或不存在"
          fi

      # 失敗或成功都上傳 rclone 日誌，方便除錯
      - name: Upload rclone logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rclone-logs
          path: rclone.log

      # 清理超過 5 天的舊資料（在部署前執行）
      - name: Prepare docs directory for deployment
        run: |
          echo "準備部署資料夾..."
          ls -la docs/ || echo "docs 資料夾為空"
          if [ -d "docs/images" ]; then
            echo "圖片資料夾內容:"
            ls -la docs/images/
          fi

      # 部署到 GitHub Pages（使用 keep_files 保留舊檔案）
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          keep_files: true  # 保留舊檔案，新檔案會覆蓋同名檔案

      # 清理 gh-pages 分支中超過 10 天的舊資料
      - name: Clean old data in gh-pages (keep last 10 days)
        continue-on-error: true
        run: |
          # 配置 git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 切換到 gh-pages 分支
          git fetch origin gh-pages
          git checkout gh-pages

          # 執行清理腳本
          python - <<EOF
          import os
          from datetime import datetime
          import shutil

          # 取得所有 HTML 檔案（排除 index.html）
          html_files = [f for f in os.listdir('.')
                        if f.endswith('.html') and f != 'index.html']

          # 解析日期並排序
          dates = []
          for f in html_files:
              try:
                  date_str = f.replace('.html', '')
                  date = datetime.strptime(date_str, '%Y-%m-%d')
                  dates.append((date, date_str))
              except ValueError:
                  print(f"無法解析日期: {f}")

          dates.sort(reverse=True)  # 最新的在前

          # 保留最近 10 天，刪除其他的
          files_deleted = False
          if len(dates) > 10:
              print(f"發現 {len(dates)} 天的資料，保留最近 10 天")
              for date, date_str in dates[10:]:
                  # 刪除 HTML 檔案
                  html_file = f"{date_str}.html"
                  if os.path.exists(html_file):
                      os.remove(html_file)
                      print(f"已刪除: {html_file}")
                      files_deleted = True

                  # 刪除對應的圖片資料夾
                  images_dir = os.path.join("images", date_str)
                  if os.path.exists(images_dir):
                      shutil.rmtree(images_dir)
                      print(f"已刪除: {images_dir}")
                      files_deleted = True

              # 寫入標記檔案，告訴後續步驟是否需要 commit
              with open('/tmp/files_deleted.txt', 'w') as f:
                  f.write('true' if files_deleted else 'false')
          else:
              print(f"目前有 {len(dates)} 天的資料（≤10 天），無需清理")
              with open('/tmp/files_deleted.txt', 'w') as f:
                  f.write('false')
          EOF

          # 如果有刪除檔案，則提交變更
          if [ -f "/tmp/files_deleted.txt" ] && grep -q "true" /tmp/files_deleted.txt; then
            echo "提交清理變更..."
            git add -A
            git commit -m "🗑️ 清理超過 10 天的舊資料 (自動清理)" || echo "無變更需要提交"
            git push origin gh-pages || echo "推送失敗"
          else
            echo "無需提交變更"
          fi

          # 切回主分支
          git checkout main
